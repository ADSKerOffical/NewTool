local player = game.Players.LocalPlayer
local tool = Instance.new("Tool", player:WaitForChild("Backpack"))
tool.Name = "Gravity sword"
tool.Grip = CFrame.new(3.5, 0.55, 0) * CFrame.Angles(math.rad(90), math.rad(0), math.rad(90))

local handle = Instance.new("Part", tool)
handle.Name = "Handle"
handle.Size = Vector3.zero

local mesh = Instance.new("SpecialMesh", handle)
mesh.MeshId = "rbxassetid://13281939513"
mesh.TextureId = "rbxassetid://13281939702"
mesh.Scale = Vector3.new(0.2, 0.2, 0.2)

local lastPressTime = 0
tool.Activated:Connect(function()
local currentTime = tick()
    if currentTime - lastPressTime >= 1 then
         lastPressTime = currentTime
local anims = {"74909537", "74909551"}
local Anim = Instance.new("Animation")
Anim.AnimationId = "rbxassetid://" .. anims[math.random(1, #anims)]
local k = player.Character.Humanoid:LoadAnimation(Anim)
k.Looped = false
k:Play()
k:AdjustSpeed(3.25)

   local slash_root = Instance.new("Part", workspace)
   slash_root.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -16)
   slash_root.Size = Vector3.new(20, 20, 20)
   slash_root.CanCollide = false
   slash_root.Anchored = true
   slash_root.CanQuery = false
   slash_root.CanTouch = false
   slash_root.Shape = "Ball"
   slash_root.Color = Color3.new(0.1, 0.1, 0.6)
   slash_root.Material = "Neon"
   game.Debris:AddItem(slash_root, 0.9)
   
   local sound = Instance.new("Sound", slash_root)
   sound.SoundId = "rbxassetid://2162238854"
   sound.Volume = 1
   sound.PlaybackSpeed = 1
   sound.TimePosition = 0.2
   sound.Looped = false
   sound:Play()
   game.Debris:AddItem(sound, 5)
   
   for _, side in next, Enum.NormalId:GetEnumItems() do
     local texture = Instance.new("Decal", slash_root)
     texture.Texture = "rbxassetid://6229699964"
     texture.Color3 = Color3.new(0.1, 0.1, 0.6)
     texture.Face = side
     
     slash_root:GetPropertyChangedSignal("Transparency"):Connect(function()
       texture.Transparency = slash_root.Transparency
     end)
   end
   
   local humanoids = {}
for _, part in next, workspace:GetPartBoundsInRadius(handle.Position + player.Character.HumanoidRootPart.CFrame.LookVector * 10, 16) do
    if part.Parent:IsA("Model") and part.Parent:FindFirstChildOfClass("Humanoid") and not part:IsDescendantOf(player.Character) then
      if not table.find(humanoids, part.Parent:FindFirstChildOfClass("Humanoid")) then
        table.insert(humanoids, part.Parent:FindFirstChildOfClass("Humanoid"))
      end
    end
  end

  for _, humanoid in next, humanoids do
    humanoid:TakeDamage(80 + (#humanoids * 10))
    humanoid.RootPart.Velocity += slash_root.CFrame.LookVector * 200
    local BF = Instance.new("BodyForce", humanoid.RootPart)
    BF.Force = Vector3.new(0, humanoid.RootPart:GetMass() * workspace.Gravity * math.random(-3, 8), 0)
    game.Debris:AddItem(BF, 5)
  end
  
  for _, part in next, workspace:GetPartBoundsInRadius(handle.Position + player.Character.HumanoidRootPart.CFrame.LookVector * 10, 16) do
    if part.Anchored == false and not part:IsDescendantOf(player.Character) and not part.Parent:FindFirstChildOfClass("Humanoid") then
       part.Velocity = (slash_root.Position - part.Position).Unit * -100
       local BF = Instance.new("BodyForce", part)
       BF.Force = Vector3.new(0, part:GetMass() * workspace.Gravity * math.random(-3, 8), 0)
       game.Debris:AddItem(BF, 3)
       
       for _, bm in next, part:GetChildren() do
         if bm:IsA("BodyVelocity") then
           bm.Velocity = -bm.Velocity
         end
       end
    end
  end
   
   local partTweenn2 = game:GetService("TweenService"):Create(slash_root, TweenInfo.new(0.65, Enum.EasingStyle.Exponential), {
       Size = Vector3.zero,
       Color = Color3.new(0, 0, 0),
       Transparency = 1
     })
   partTweenn2:Play()
   end
end)
