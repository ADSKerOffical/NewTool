local tool = Instance.new("Tool", game.Players.LocalPlayer.Backpack)
tool.Name = "Desert dagger"
tool.ToolTip = ""
tool.Grip = CFrame.new(0, -0.3, 0) * CFrame.Angles(math.rad(180), 0, 0)

local handle = Instance.new("Part", tool)
handle.Name = "Handle"

local mesh = Instance.new("SpecialMesh", handle)
mesh.MeshId = "rbxassetid://430421129"
mesh.TextureId = "rbxassetid://430421223"
mesh.Scale = Vector3.new(0.002, 0.002, 0.002)

local lastPressTime = 0
lastStun = 0
tool.Activated:Connect(function()
local currentTime = tick()
   if currentTime - lastPressTime >= 1 then
        lastPressTime = currentTime
local anim = Instance.new("Animation", game.Players.LocalPlayer.Character)
anim.AnimationId = "rbxassetid://94160738"
local d = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(anim)
d:Play()
game.Debris:AddItem(anim, 10) game.Debris:AddItem(d, 10)

task.wait(0.2)

local humanoids = {}
for _, part in next, workspace:GetPartBoundsInRadius(handle.Position, 6.5) do
    if part.Parent:IsA("Model") and part.Parent:FindFirstChildOfClass("Humanoid") and not part:IsDescendantOf(game.Players.LocalPlayer.Character) then
      if not table.find(humanoids, part.Parent:FindFirstChildOfClass("Humanoid")) then
        table.insert(humanoids, part.Parent:FindFirstChildOfClass("Humanoid"))
      end
    end
  end

     for _, humanoid in next, humanoids do
       humanoid:TakeDamage((humanoid.FloorMaterial == Enum.Material.Air or humanoid.PlatformStand == false) and 20 or 10)
       
       if currentTime - lastStun >= 10 then
          lastStun = currentTime
          humanoid:ChangeState("FallingDown")
          humanoid:UnequipTools()
       end
       
       local sound = Instance.new("Sound", humanoid.RootPart)
       sound.SoundId = "rbxassetid://201858024"
       sound.Volume = 1
       sound.PlaybackSpeed = 1
       sound:Play()
       game.Debris:AddItem(sound, 10)
     end
   end
end)
